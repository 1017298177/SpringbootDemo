一、选择题（共12小题，每小题2.5分，共30分）
	以下不是spring boot优点的是 ( D  )
		A．快速搭建项目
		B．简化配置  
		C．自动配置  
		D．无需容器
	Spring Boot配置，以下哪个优先级最高（ A ）
		A、外置：xx.jar同目录下/config/application.properties；
		B、外置：xx.jar同目录下/config/application.yml；
		C、内置：src/main/resources/config；
		D、内置：src/main/resources
	以下log日志级别哪个最高（ A ）
		A、DEBUG
		B、INFO
		C、WARN
		D、ERROR
	以下不是spring boot的核心注解的是 ( D  )
		A.	@SpringBootConfiguration
		B.	@EnableAutoConfiguration
		C.	@ComponentScan
		D.	@MapperScan
	要使用springMVC的功能，需要导入那个包 (  C  )
		A．spring-boot-starter-jdbc  
		B．spring-boot-starter-thymeleaf  
		C．spring-boot-starter-web  
		D．mybatis-spring-boot-starter
	以下哪个注解不能加在类上 (  B  )
		A.	@Controller
		B.	@ResponseBody
		C.	@RestController
		D.	@RequestMapping
	当控制层上有@RestController注解时，方法中返回一个字符串“<h1>Hello</h1>”，浏览器调用的结果是 ( A )
		A. 一级标题显示的Hello
		B.	找不到Hello.html
		C.	<h1>Hello</>
		D.	Hello
	SpringBoot项目中配置文件的格式 (  C  )
		A．properties  
		B．yml  
		C．两者都可以
	不是SpringBoot核心配置文件是（ A ）
		A.	bootstrap
		B.	application
		C.	application-dev
	前台使用json参数格式，控制器consumer、参数使用的注解是（ A ）
		A、application/josn ---- @RequestBody
		B、application/josn ---- @ModelAttribute
		C、application/x-www-form-urlencoded ---- @RequestBody
		D、application/x-www-form-urlencoded ---- @ModelAttribute
	@Pointcut("execution(public * com.thornBird.sbd.modules.*.controller.*.*(..))")，第三个*代表（ C ）
		A、代表返回类型不限
		B、代表module下所有子包
		C、代表所有类
		D、代表所有方法
	Url匹配风格中/admin*，以下哪个匹配不正确（ D ）
		A、/admin
		B、/admin1
		C、/admin123
		D、/admin/1
	Mybatis框架中，插入数据使用那个注解（ B ）
		A、@Update
		B、@Insert
		C、@Select
		D、@InsertMapping

二、填空题（共5小题，每小题5分，共25分）
	获取配置文件的属性值，使用哪个注解___ @Value_____________；
	Java配置依赖的2个注解是___@configration_______，____@Bean_______;
	Spring Boot修改tomcat端口号为9090应该怎么写？___Server.port = 9090_________;
	自定义拦截器需要实现___InterruptHandler_____接口；
	过滤器需要使用___WebFilter______注解;
	上传文件，使用__MultiFile__接收文件对象，consumer使用_ multiprat/form-data____;

三、问答题（每题5分，共25分）
	阐述 Spring Boot 特性，举一个例子来解释 Staters 的内容；
                       简化配置，自动配置，快速搭建项目；如果导入了一个springboot-stater-web包，会把springmvc的包导入，会导入jackson的包，还会导入日志系统的包   
	Mybatis传参中，#{*}、${*}的区别？
                        #{*} ：起?占位符的作用，防止sql注入
                        ${*} ：使用的是字符串拼接的方式
	简述Restful规则？
                    以实体为中心，/{}：括号里跟id
	简述Git使用流程，写几个常用Git命令？
                   先建立一个本地仓库，然后将项目提交到本地仓库，再推送到远程仓库中，commit,pull,push,clone
	简述shiro两大功能实现流程；
                        当用户登录时，先制作一个令牌，将登录的用户名和密码放到令牌中，在realm中进行验证，先查询到用户名在数据库对应的密码，再和令牌中的密码比对；
                        当验证通过后，如果遇到shiro标签或者注解，会触发授权，从验证后的信息中得到当前用户，然后查询到该用户的权限角色，进行授权

四、编程题（每题10分，共20分）
	1、提供一个接口，返回 List<User> 列表，对该列表进行排序、保留10条数据；页面端使用 ajax post 方式提交请求，包装查询参数，获取接口返回数据，并遍历数据渲染到页面上 table 表格中；
                              @PostMapping（“/api/users”,consums="application/json"）
                               public PageInfo<User> getUser(@RequestBody SearchVo searchVo){
                                   return  service.getUser(searchVo);                           
                                  }
                              $.ajax({
                              url:"/api/users",
                              type:"post",
                             contentTyped:"application/json",
                             success:function(info){
                           }
                           })

	
	2、设计一套购物车接口，以 Cookie 或者 redis 实现

                       @RequestMapping("/add/{itemId}")
                       @ResponseBody
                       public ResultVo addCart(@PathVariable("itemId")long itemId,
                       @RequestParam(value="num",defaultValue="1")int num ,
                           HttpServletRequest request,HttpServletResponse response) {
        
                      
                     ItemVo itemVo = itemService.selectItemVoById(itemId);
        
                     String image = itemVo.getImages()==null?"":itemVo.getImages()[0];
                   if(itemVo != null) {
                     CartVo cartVo = new CartVo(itemId, itemVo.getTitle(), itemVo.getPrice(), num, image);
                     cartService.addCartVo(cartVo,request,response);
                     return ResultVo.success(null);
                         }
                    return ResultVo.error(StatusConstant.ERROR, "添加购物车失败!");
                        }
    
                    @RequestMapping("/show")
                    public String showCart(Model model,HttpServletRequest request) {
        
                   
                   List<CartVo> cartVos = cartService.selectCartVos(request);
        
                   model.addAttribute("cartList", cartVos);
        
                   return "cart";
                    }
